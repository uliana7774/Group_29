{
	"info": {
		"_postman_id": "de7c69ba-1448-417e-bb2d-b22b7a5708ec",
		"name": "Group_29_HW_2_JuliaS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Проверить, что в body приходит правильный string.",
							"pm.test(\"Body is correct\", function () { ",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData=pm.response.json();",
							"",
							"pm.test(\"name_check\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Alex\");",
							"});",
							"",
							"pm.test(\"age_check\", function () {",
							"    pm.expect(jsonData.age).to.eql(\"32\");",
							"});",
							"",
							"pm.test(\"salary_check\", function () {",
							"    pm.expect(jsonData.salary).to.eql(2000);",
							"});",
							"",
							"",
							"let req = request.data",
							"",
							"let req_name=req.name",
							"console.log(\"req_name = \", req_name)",
							"",
							"let req_age=req.age",
							"console.log(\"req_age = \", req_age)",
							"",
							"",
							"let req_salary=req.salary",
							"console.log(\"req_salary = \", req_salary)",
							"",
							"",
							"console.log(jsonData.family);",
							"",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4);",
							"console.log(jsonData.family.u_salary_1_5_year);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var resp = pm.response.json();",
							"",
							"var req = pm.request.url.query.toObject();",
							"",
							"pm.test(\"The response name is equal to the request name\", function(){",
							"    pm.expect(resp.name).to.eql(req.name);",
							"});",
							"",
							"pm.test(\"The response age is equal to the request age\", function(){",
							"    pm.expect(resp.age).to.eql(req.age);",
							"});",
							"pm.test(\"The response salary is equal to the request salary\", function(){",
							"    pm.expect(String(resp.salary)).to.eql(req.salary);",
							"});",
							"console.log(resp.family);",
							"pm.test(\"The dog parameter has name\",function(){",
							"    pm.expect(resp.family.pets.dog).to.have.property('name');",
							"});",
							"pm.test(\"The dog parameter has age\", function(){",
							"    pm.expect(resp.family.pets.dog).to.have.property('age');",
							"});",
							"pm.test(\"The name parameter is equal Luky\", function(){",
							"    pm.expect(resp.family.pets.dog.name).to.eql('Luky');",
							"});",
							"pm.test(\"The age parameter is equal 4\", function(){",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Julia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Julia&age=39&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Julia"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var resp = pm.response.json();",
							"var req = pm.request.url.query.toObject();",
							"pm.test(\"The name parameter response is equal to the request name\", function(){",
							"    pm.expect(resp.name).to.eql(\"Julia\");",
							"});",
							"pm.test(\"The age parameter response is equal to the request age\", function(){",
							"    pm.expect(resp.age).to.eql(39);",
							"});",
							"//Вывести в консоль параметр salary из request.",
							"console.log(req.salary);",
							"//Вывести в консоль параметр salary из response.",
							"console.log(resp.salary);",
							"//Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(resp.salary[0]);",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(resp.salary[1]);",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(resp.salary[2]);",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"The salary[0] parameter is equal the salary from the request\", function(){",
							"    pm.expect(resp.salary[0]).to.eql(Number(req.salary));",
							"});",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"The salary[1] = (salary from the request) * 2\", function(){",
							"    pm.expect(Number(resp.salary[1])).to.eql(req.salary * 2);",
							"});",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"The salary[2] = (salary from the request) * 3\", function(){",
							"    pm.expect(Number(resp.salary[2])).to.eql(req.salary * 3);",
							"});",
							"//Передать в окружение переменную name",
							"pm.environment.set(\"name\", \"Julia\");",
							"//Передать в окружение переменную age",
							"pm.environment.set(\"age\", \"39\");",
							"//Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", \"1000\");",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for(let i = 0; i < resp.length; i++){",
							"    console.log(resp.salary[i]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Julia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Julia&age=39&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Julia"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request",
							"// Вставить параметр age из окружения в age",
							"// Вставить параметр name из окружения в name",
							"// Отправить запрос.",
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Спарсить response body в json.",
							"var resp = pm.response.json();",
							"//Спарсить request.",
							"var req = request.data;",
							"//Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"The json parameter has the start_qa_salary\", function(){",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"The json response from the response has the qa_salary_after_6_months\", function(){",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"The json parameter from the response has the qa_salary_after_12_months\", function(){",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"The json parameter from the response has the qa_salary_after_1.5_year\", function(){",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"The json parameter from the response has the qa_salary_after_3.5_years\", function(){",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"//Проверить, что json response имеет параметр person",
							"pm.test(\"The json parameter from the response has the person parameter\", function(){",
							"    pm.expect(resp).to.have.property(\"person\");",
							"});",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"The start_qa_salary is equal the salary from the request\", function(){",
							"    pm.expect(resp.start_qa_salary).to.eql(Number(req.salary));",
							"});",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"The qa_salary_after_6_months is equal (the salary from request) * 2\", function(){",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(Number(req.salary) * 2)",
							"});",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months is equal salary * 2.7 from request\", function(){",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary * 2.7);",
							"});",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_1.5_year is equal salary * 3.3 from request\", function(){",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql((req.salary) * 3.3);",
							"});",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"The qa_salary_after_3.5_years =  salary * 8 from the request\", function(){",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(Number(req.salary) * 3.8)",
							"});",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"In the person u_name[1] is equal salary from the request\", function(){",
							"    pm.expect(resp.person.u_name[1]).to.eql(Number(req.salary));",
							"});",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"The u_age parameter is equal age from the request\", function(){",
							"    pm.expect(resp.person.u_age).to.eql(Number(req.age));",
							"});",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"The u_salary_5_years parameter is equal salary * 4.2 from the request\", function(){",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(Number(req.salary) * 4.2);",
							"});",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"responseData=pm.response.json();",
							"for (let person_element in responseData.person) {",
							"  console.log(responseData.person[person_element]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Julia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}